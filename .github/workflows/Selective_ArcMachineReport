workflow ArcMachines {
    inlineScript {
        try {
            Write-Output "Logging in to Azure..."
            Connect-AzAccount -Identity
        }
        catch {
            Write-Error -Message $_.Exception
            throw $_.Exception
        }

        # Get all subscriptions in the tenant
        $subscriptions = Get-AzSubscription
        $arcMachines = @()

        # Loop through subscriptions to get all resource groups
        ForEach ($subscription in $subscriptions) {

            # Set context to the current subscription
            Set-AzContext -SubscriptionObject $subscription

            Write-Host "Processing subscription: $($subscription.Name)"

            # Get all resource groups in the current subscription
            $groups = Get-AzResourceGroup
            ForEach ($currGroup in $groups) {
                Write-Host "Processing resource group: $($currGroup.ResourceGroupName) in subscription: $($subscription.Name)"
                
                # Get all Arc machines in the specified resource group with "SDF" in their name
                $machines = Get-AzConnectedMachine -ResourceGroupName $currGroup.ResourceGroupName | Where-Object { $_.Name -like "# enter your desired name" }

                # Store machine details, including extensions
                ForEach ($machine in $machines) {
                    # Initialize a temp object for machine details
                    $temp = "" | Select-Object MachineName, MDE_Linux, AzureMonitorLinuxAgent, AzureMonitorWindowsAgent, MDE_Windows

                    # Set machine name
                    $temp.MachineName = $machine.Name

                    # Initialize extension states
                    $temp.MDE_Linux = "N/A"
                    $temp.AzureMonitorLinuxAgent = "N/A"
                    $temp.AzureMonitorWindowsAgent = "N/A"
                    $temp.MDE_Windows = "N/A"

                    # Query for installed extensions on the Arc machine
                    $extensions = Get-AzConnectedMachineExtension -ResourceGroupName $currGroup.ResourceGroupName -MachineName $machine.Name

                    # Populate the properties based on the extensions available
                    foreach ($ext in $extensions) {
                        switch ($ext.Name) {
                            "MDE.Linux" { $temp.MDE_Linux = $ext.ProvisioningState }
                            "AzureMonitorLinuxAgent" { $temp.AzureMonitorLinuxAgent = $ext.ProvisioningState }
                            "AzureMonitorWindowsAgent" { $temp.AzureMonitorWindowsAgent = $ext.ProvisioningState }
                            "MDE.Windows" { $temp.MDE_Windows = $ext.ProvisioningState }
                        }
                    }

                    $arcMachines += $temp
                }
            }
        }

        # Generate HTML for email body with found machines and their extensions
        $htmlbody = "<h3> Arc Machines</h3>"
        $htmlbody += "<table style='border-collapse: collapse; width: 100%;'>"
        $htmlbody += "<tr><th style='border: 1px solid black; padding: 8px;'>Machine Name</th><th style='border: 1px solid black; padding: 8px;'>MDE Linux</th><th style='border: 1px solid black; padding: 8px;'>Azure Monitor Linux Agent</th><th style='border: 1px solid black; padding: 8px;'>Azure Monitor Windows Agent</th><th style='border: 1px solid black; padding: 8px;'>MDE Windows</th></tr>"

        # Add machine data to the table
        foreach ($machine in $arcMachines) {
            $htmlbody += "<tr>"
            $htmlbody += "<td style='border: 1px solid black; padding: 8px;'>$($machine.MachineName)</td>"

            # Style statuses: Bold for failed, grey and small for succeeded
            foreach ($prop in @($machine.MDE_Linux, $machine.AzureMonitorLinuxAgent, $machine.AzureMonitorWindowsAgent, $machine.MDE_Windows)) {
                if ($prop -eq "Failed") {
                    $htmlbody += "<td style='border: 1px solid black; padding: 8px;'><strong style='color:red;'>$prop</strong></td>"
                }
                elseif ($prop -eq "Succeeded") {
                    $htmlbody += "<td style='border: 1px solid black; padding: 8px;'><span style='color:grey; font-size:smaller;'>$prop</span></td>"
                }
                else {
                    $htmlbody += "<td style='border: 1px solid black; padding: 8px;'>$prop</td>"
                }
            }

            $htmlbody += "</tr>"
        }

        $htmlbody += "</table>"

        # Output found machines to console
        $arcMachines | Format-Table -AutoSize

        ### SMTP mailing details
        $smtpserver = "smtp.sendgrid.net"
        $smtpport = 587
        $username = "apikey"
        $pwd = "#add info"
        $securepwd = ConvertTo-SecureString $pwd -AsPlainText -Force
        $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username, $securepwd

        $from = "#sender email"
        $recipients = @("#recipents email")
        $subject = " Arc Machines with Extensions"

        # Send the email with the results
        Send-MailMessage -From $from -Subject $subject -To $recipients -Body $htmlbody -BodyAsHtml -UseSSL -Port $smtpport -SmtpServer $smtpserver -Credential $credential
    }
}
